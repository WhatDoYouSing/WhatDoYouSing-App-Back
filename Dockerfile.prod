#################
#   BUILDER     #
#################
FROM python:3.8.3-alpine AS builder

# 작업 폴더
WORKDIR /usr/src/app

# 파이썬 설정
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# ── 시스템 빌드 툴 + JDK (JPype1 컴파일) ──
RUN apk add --no-cache \
        build-base \
        openjdk17-jdk \
        python3-dev \
        jpeg-dev zlib-dev \
        linux-headers

# ── requirements wheel 생성 ──
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --wheel-dir /usr/src/app/wheels -r requirements.txt \
 && python -m spacy download en_core_web_sm


#################
#    FINAL      #
#################
FROM python:3.8.3-alpine

# 앱 사용자·디렉터리 생성
RUN addgroup -S app && adduser -S app -G app
ENV HOME=/home/app \
    APP_HOME=/home/app/web \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    JAVA_HOME=/usr/lib/jvm/default-jvm

RUN mkdir -p $APP_HOME/static $APP_HOME/media
WORKDIR $APP_HOME

# ── 런타임 라이브러리 ──
RUN apk add --no-cache \
        openjdk17-jre-headless \
        jpeg-dev zlib-dev \
        libgcc libstdc++             # JPype1 실행에 필요한 기본 라이브러리

# ── 파이썬 패키지 설치 ──
COPY --from=builder /usr/src/app/wheels /wheels
RUN pip install --no-cache-dir /wheels/*

# ── 프로젝트 복사 ──
COPY . $APP_HOME
COPY ./config/docker/entrypoint.prod.sh $APP_HOME

# 권한 설정
RUN chown -R app:app $APP_HOME
USER app

# (entrypoint에서 gunicorn 등 실행하도록 작성되어 있다고 가정)
ENTRYPOINT ["sh", "./entrypoint.prod.sh"]